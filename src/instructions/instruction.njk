---
pagination:
  data: instructions
  size: 1
  alias: inst
permalink: instructions/{{ inst.name }}/index.html
eleventyComputed:
  title: "{{ inst.name }}"
---
<h1>{{ inst.name }}</h1>

<p>{{ inst.description }}</p>

<section>
  <h2>Synopsis</h2>
  <pre><code>{{ inst.syntax }}</code></pre>
</section>

<section>
  <h2>Encoding</h2>

  <p><strong>Type:</strong> {{ inst.encodingType or "" }}</p>

  <div class="bitfield-diagram">
    <script type="text/bitfield">
    {{ inst.bitfieldJSON | dump | safe }}
    </script>
  </div>

  <script>
  (function () {
    function jsonmlToDom(node, inSvg) {
      if (node === null || node === undefined) return null;
      if (typeof node === "string" || typeof node === "number") {
        return document.createTextNode(String(node));
      }
      if (!Array.isArray(node) || node.length === 0) return null;

      const [tagName, ...rest] = node;
      let attrs = {};
      let children = rest;

      if (children.length && typeof children[0] === "object" && !Array.isArray(children[0])) {
        attrs = children.shift() || {};
      }

      const isSvgNode = inSvg || tagName === "svg";
      const element = isSvgNode
        ? document.createElementNS("http://www.w3.org/2000/svg", tagName)
        : document.createElement(tagName);

      Object.entries(attrs).forEach(([key, value]) => {
        element.setAttribute(key, value);
      });

      children.forEach(child => {
        const childNode = jsonmlToDom(child, isSvgNode);
        if (childNode) element.appendChild(childNode);
      });

      return element;
    }

    function parseBitfieldData(raw) {
      if (!raw) return null;
      try {
        const payload = JSON.parse(raw);
        if (Array.isArray(payload)) {
          return { segments: payload };
        }
        if (payload && Array.isArray(payload.reg)) {
          return { segments: payload.reg, options: payload.options };
        }
        if (payload && Array.isArray(payload.fields)) {
          return { segments: payload.fields, options: payload.options };
        }
      } catch (err) {
        console.warn("Failed to parse bitfield JSON", err);
      }
      return null;
    }

    function renderBitfieldScripts() {
      const scripts = document.querySelectorAll('script[type="text/bitfield"]');
      if (!scripts.length) return;

      scripts.forEach(scriptEl => {
        const container = scriptEl.parentElement;
        if (!container) return;

        if (!window.bitfield || typeof window.bitfield.render !== "function") {
          console.warn("bitfield.render is not available");
          return;
        }

        const parsed = parseBitfieldData(scriptEl.textContent.trim());
        if (!parsed || !Array.isArray(parsed.segments) || !parsed.segments.length) return;

        const segments = parsed.segments
          .map(seg => {
            const bits = Number(seg.bits ?? seg.width ?? 0);
            return Object.assign({}, seg, { bits });
          })
          .filter(seg => seg.bits > 0);

        if (!segments.length) return;

        const totalBits = segments.reduce((sum, seg) => sum + seg.bits, 0);
        const options = Object.assign({ bits: totalBits }, parsed.options || {});

        try {
          const jsonml = window.bitfield.render(segments, options);
          const svgNode = jsonmlToDom(jsonml, false);
          if (svgNode) {
            container.insertBefore(svgNode, scriptEl);
          }
        } catch (err) {
          console.error("Failed to render bitfield", err);
        }
      });
    }

    document.addEventListener("DOMContentLoaded", renderBitfieldScripts);
  })();
  </script>

  <div class="bits">
    {% if inst.encoding.funct7 %}<div><strong>funct7</strong>: {{ inst.encoding.funct7 }}</div>{% endif %}
    {% if inst.encoding.funct3 %}<div><strong>funct3</strong>: {{ inst.encoding.funct3 }}</div>{% endif %}
    {% if inst.encoding.opcode %}<div><strong>opcode</strong>: {{ inst.encoding.opcode }}</div>{% endif %}
  </div>

</section>

<section>
  <h2>Availability</h2>
  <ul>
    <li><strong>Extension:</strong> {{ inst.definedBy }}</li>
    <li><strong>Base:</strong> {% if inst.base == 64 %}RV64 only{% else %}RV32 + RV64{% endif %}</li>
  </ul>
</section>


<style>
.bitfield-diagram {
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 0.75rem;
  margin-top: 0.5rem;
  background: #fafafa;
}
.bits { margin-top: 0.5rem; color: #333; }
body { font-family: system-ui, sans-serif; line-height: 1.5; }

svg text {
  font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;
}
</style>

<script src="/bitfield/build/bitfield.js"></script>
